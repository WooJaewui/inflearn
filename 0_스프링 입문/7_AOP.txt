
 AOP
 26 ~ 27강.



 # AOP가 필요한 상황.

AOP Aspect Oriented Programming.
모든 메소드의 호출 시간을 측정하고 싶다면 ??
공통 관심 사항( cross-cutting concern ) vs 핵심 관심 사항( core concern )
회원 가입 시간, 회원 조회 시간을 측정하고 싶다면 ??

문제.
회원가입, 회원 조회에 시간을 측정하는 기능은 핵심 관심 사항이 아니다.
시간을 측정하는 로직은 공통 관심 사항이다. 
시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어렵다.
시간을 측정하는 로직을 별도의 공통 로직으로 만들기 어렵다.
시간을 측정하는 로직을 변경할 때 모든 로직을 찾아서 변경해야된다.



 # AOP 적용.

AOP 설명.
공통 관심 사항( cross-cutting concern ) vs 핵심 관심 사항( core concern ) 분리.

어노테이션.
@Aspect : Aspect를 사용하려는 클래스에 적용. ( @Component와 같이 사용 - 클래스에 적용 )
@Around : 어느 부분에 공통 관심 사항을 사용할 것인지 결정한다. ( 메소드에 적용 ) 

프록시 AOP 실행 순서.
프록시를 통해 가상 클래스를 만들어서 AOP before부분이 실행한 후,
진짜 클래스 코드가 실행한 후 -> AOP after부분이 실행된다.



