
 컴포넌트 스캔.



 # 컴포넌트 스캔과 의존관계 자동 주입 시작하기.

컴포넌트 스캔.
설정 정보에 빈을 일일이 등록하기 힘들고, 설정 정보도 너무 커진다.
스프링은 설정 정보가 없어도 자동으로 스플이 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
@Configuration도 @Component가 붙어있다.

컴포넌트 스캔 필터.
@ComponentScan ( 
	excludeFilters 
	        = @ComponentScan.Filter( type = FilterType.ANNOTATION, classes = Configuration.class ) 
)
보통 실무에서는 설정 코드를 제외하지 않는다. ( 예제 코드를 살리기 위해 제외한다 )

컴포넌트 스캔 동작.
@ComponentScan은 @Component가 붙은 모든 클래스를 스프링 빈으로 등록한다.
@Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.

컴포넌트 스캔 빈 이름 특징.
이때 스프링 빈의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자로 바꾼다.
직접 빈 이름을 지정하고 싶은 경우 @Componenet( "이름" )을 부여하면 된다.

@Autowired.
타입을 가지고 컨테이너의 빈을 자동으로 의존성 주입시켜 준다.



 # 탐색 위치와 기본 스캔 대상.

@ComponentScan( basePackages = "패키지이름" )
원하는 패키지와 하위패키지에서만 Component를 확인한다.
basePackages를 지정하지 않으면 @ComponentScan을 붙인 설정 정보 클래스의 패키지가 시작 위치가 된다.
모든 자바코드를 다 확인하면 시간이 너무 올래걸리기 때문에 설정해준다.

권장하는 방법.
설정 정보 클래스의 위치를 프로젝트 최상단에 두는 것. ( 최근 부트도 이 방법을 기본으로 제공 )
@SpringBootApplication에 @ComponentScan을 포함하고 있다.

컴포넌트 스캔 기본 대상.
@Component : 컴포넌트 스캔에서 사용.
@Controller : 스프링 MVC 컨트롤러에서 사용. ( MVC 컨트롤러로 인식 ) 
@Service : 스프링 비즈니스 로직에서 사용. ( 특별한 처리를 하지 않는다 ) 
@Repository : 스프링 데이터 접근 계층에서 사용. ( 데이터 계층의 예외를 스프링 예외로 변환해준다 )
@Configuration : 스프링 설정 정보에서 사용. ( 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다 )

스프링 특징.
어노테이션은 상속관계라는 것이 없다.
어노테이션이 특정 어노테이션을 가지고 있는 것을 인식할 수 있는 것은 스프링이 지원하는 기능이다.



 # 필터.

includeFilters.
컴포넌트 스캔 대상을 추가로 지정한다.

excludeFilters.
컴포넌트 스캔에서 제외할 대상을 지정한다.

FilterType 옵션.
ANNOTATION : 기본값, 애노테이션을 인식해서 동작한다.
ASSIGNABLE_TYPE : 지정한 타입과 자식 타입을 인식해서 동작한다.
ASPECTJ : AspectJ 패턴 사용.
REGEX : 정규 표현식.
CUSTOM : TypeFilter라는 인터페이스를 구현해서 처리.



 # 중복 등록과 충돌.

자동 빈 등록 vs 자동 빈 등록.
빈 이름이 같은 경우 스프링은 오류를 발생시킨다.
ConflictingBeanDefinitionException 예외 발생.

수동 빈 등록 vs 자동 빈 등록.
수동 빈이 자동 빈을 오버라이딩 해버린다. ( 잡기 애매한 버그가 발생할 수 있다 )
최근 스프링 부트에서는 수동 빈과 자동 빈이 충돌나면 오류가 발생하도록 기본 값을 바꾸었다.



