
 HTTP 기본.



 # 모든 것이 HTTP.

HTTP 메시지에 모든 것을 전송.
﻿﻿● HTMl, TEXT.
﻿● IMAGE, 음성, 영상, 파일.
﻿● JSON, XML ( API )
﻿●﻿ 거의 모든 형태의 데이터 전송 가능.
﻿● 서버간에 데이터를 주고 받을 떄도 대부분 HTTP 사용.
﻿● 지금은 HTTP 시대!

HTTP 역사.
HTTP/0.9 1991년 : GET 메소드만 지원, HTTP 헤더 X.
HTTP/1.0 1996년 : 메소드, 헤더 추가.
HTTP/1.1 1997년 : 가장 많이 사용, 우리에게 가장 중요한 버전.
	﻿● RFC2068 ( 1997 ) -> RFC2616 ( 1999 ) -> RFC7230~7235 ( 2014 )
HTTP/2 2015년 : 성능 개선.
HTTP/3 진행중 : TCP 대신에 UDP 사용, 성능 개선.

기반 프로토콜.
﻿● TCP : HTTP/1.1 , HTTP/2
﻿● UDP : HTTP/3
﻿● 현재 HTTP/1.1 주로 사용.
	○ HTTP/2, HTTP/3도 점점 증가.

HTTP 특징.
클라이언트 서버 구조.
무상태 프로토콜( 스테이스리스 ), 비연결성.
HTTP 메시지.
단순함, 확장 가능.



 # 클라이언트 서버 구조.

클라이언트 서버 구조.
Request Response 구조.
클라이언트는 서버에 요청을 보내고, 응답을 대기.
서버가 요청에 대한 결과를 만들어서 응답.

장점.
서버는 비즈니스 로직, 데이터와 관련된 일을 하고, 클라이언트는 UI와 관련된 일을 하게 만든다.
각각 독립적으로 발전할 수 있다.



 # Stateful, Stateless.

statefull.
서버가 클라이언트의 상태를 보존.
항상 같은 서버가 유지되어야 한다 - 중간에 서버가 바뀌면 상태 정보를 서버에게 미리 알려줘야 한다.

무상태 프로토콜 Stateless.
서버가 클라이언트의 상태를 보존 하지 않음.
장점 : 서버 확장성 높음 - 무한한 서버 증설 가능( 스케일 아웃 - 수평 확장 )
단점 : 클라이언트가 추가 데이터 전송.

Stateless 실무 한계.
모든 것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
무상태.
	﻿● 로그인이 필요 없는 단순한 서비스 소개 화면.
상태 유지.
	﻿● 로그인.
로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지.
일반적으로 브라우저 쿠기와 서버 세션등을 사용해서 상태 유지.
상태 유지는 최소한만 사용.
데이터를 많이 보내야 한다는 단점이 있다.



 # 비 연결성 connectionless.

비 연결성.
HTTP는 기본이 연결을 유지하지 않는 모델.
일반적으로 초 단위 이하의 빠른 속도로 응답.
1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음.
	﻿● 예) 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지는 않는다.
서버 자원을 매우 효율적으로 사용할 수 있음.

비 연결성 - 한계와 극복.
TCP/IP 연결을 새로 맺어야 함 - 3 way handshake 시간 추가.
웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 CSS, JS, 이미지 등 수많은 자원이 함께 다운로드.
지금은 HTTP 지속 연결( Persistent Connections )로 문제 해결.
HTTP/2, HTTP/3에서 더 많은 최적화.

HTTP 지속 연결 Persistent Connections.
항상 연결을 끊는게 아니라 일정시간동안 연결을 유지하는 방식.

서버 개발자들이 어려워하는 업무.
정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽.



 # HTTP 메시지.

HTTP 메시지 구조.
start-line : 시작 라인.
header : 헤더.
empty line : 공백 라인( CRLF )
message body : 메시지 본문.

시작 라인 start-line.
request-line.
	﻿● method SP(공백) request-target SP(공백) HTTP-version CRLF(줄바꿈)
	﻿● HTTP 메소드, 요청 대상( path ), HTTP Version.
status-line.
	﻿● HTTP-version SP(공백) status-code SP(공백) reason-phrase CRLF(줄바꿈)

HTTP 메소드.
서버가 수행해야 할 동작 지정.
종류.
	﻿● GET : 리소스 조회.
	﻿● POST : 요청 내역 처리.
	﻿● PUT, DELETE, ... ( 뒤에 배움 )

요청 대상.
절대경로와 queryString을 적은 내용.
절대경로 = "/"로 시작하는 경로.

HTTP 헤더.
field-name: field-value로 지정함.
HTTP 전송에 필요한 모든 부가정보.
표준 헤더가 너무 많음.
필요시 임의의 헤더 추가 가능.

HTTP 메시지 바디.
실제 전송할 데이터.
HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능.

HTTP 정리.
HTTP 메시지에 모든 것을 전송.
HTTP/1.1을 기준으로 학습. ( HTTP/2, HTTP/3은 성능 개선 )
클라이언트 서버 구조.
무상태 프로토콜( stateless )
HTTP 메시지.
단순함, 확장 가능.




