
 HTTP 헤더1 - 일반 헤더.



 # HTTP 헤더 개요.

HTTP 헤더.
형식.
	● header-field = field-name: field-values
	● filed-name은 대소문자 구분 없음.

HTTP 헤더 용도.
HTTP 전송에 필요한 모든 부가정보.
	● 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보 등.
표준 헤더가 너무 많음.
필요시 임의의 헤더 추가 가능.

RFC2616에 헤더 분류. ( 1999년 )
● General 헤더 : 메시지 전체에 적용되는 정보.
● Request 헤더 : 요청 정보.
● Response 헤더 : 응답 정보.
● Entity 헤더 : 엔티티 바디 정보. ( Content-Type:text/html , Content-Length:321 등 )

HTTP BODY.
메시지 본문은 엔티티 본문을 전달하는데 사용.
엔티티 본문은 요청이나 응답에서 전달할 실제 데이터. ( 메시지 본문 안에 엔티티 본문을 담아서 보냄 )
엔티티 헤더는 엔티티 본문의 데이터를 해석할 수 있는 정보 제공.
	● 데이터 유형, 데이터 길이, 압축 정보 등등.

RFC7230~7235 변화. ( 2014년 )
엔티티 Entity -> 표현 Representation.
Representation = Representation Metadata + Representation Data.
표현 = 표현 메타데이터 + 표현 데이터.

RFC7230 헤더.
메시지 본문을 통해 표현 데이터 전달.
메시지 본문 = 페이로드 payload.
표현은 요청이나 응답에서 전달할 실제 데이터.
표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공.
	● 데이터 유형( html, json ), 데이터 길이, 압축 정보 등등.
참고 : 표현 헤더는 표현 메타데이터와, 페이로드 메시지를 구분해야 하지만, 여기서는 생략.



 # 표현.

표현 Representation.
Content-Type : 표현 데이터의 형식.
Content-Encoding : 표현 데이터의 압축 방식.
Content-Language : 표현 데이터의 자연 언어.
Content-Length : 표현 데이터의 길이.
표현 헤더는 전송, 응답 둘다 사용.

Content-Type.
표현 데이터의 형식 설명.
미디어 타입, 문자 인코딩.
	● 예) text/html; charset-=utf-8 , application/json , image/png

Content-Encoding.
표현 데이터 인코딩.
표현 데이터를 압축하기 위해 사용.
데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가.
데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제.
	● 예) gzip , deflate , identity( 압축하지 않음 )

Content-Language.
표현 데이터의 자연 언어를 표현.
	● 예) ko , en , en-US.

Content-Length.
표현 데이터의 길이 - 바이트 단위.
Transfer-Encoding( 전송 코딩 )을 사용하면 Content-Length를 사용하면 안됨.



 # 콘텐츠 협상.

협상( 컨텐츠 네고시에이션 )
클라이언트가 선호하는 표현 요청.
● Accept : 클라이언트가 선호하는 미디어 타입 전달.
● Accept-Charset : 클라이언트가 선호하는 문자 인코딩.
● Accept-Encoding : 클라이언트가 선호하는 압축 인코딩.
● Accept-Language : 클라이언트가 선호하는 자연 언어.
협상 헤더는 요청시에만 사용.

협상과 우선순위1.
Quality Values(q) 값 사용.
0~1, 클수록 높은 우선순위.
생략하면 1.
	● 예) Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

협상과 우선순위2.
구체적인 것이 우선한다.
	● 예) Accept:text/*,text/plain,text/plain;format=flowed,*/*
	● 1. text/plain;format=flowed.
	● 2. text/plain
	● 3. text/*
	● 4. */*



 # 전송 방식.

전송 방식.
● 단순 전송.
● 압축 전송.
● 분할 전송.
● 범위 전송.

단순 전송 Content-Length.
컨텐츠의 길이를 알 수 있을 때 사용한다.

압축 전송 Content-Encoding.
컨텐츠를 압축해서 전송한다.

분할 전송 Transfer-Encoding.
컨텐츠를 분할해서 보내준다. 클라이언트도 분할해서 받아서 나눠서 처리할 수 있다.
content-Length 헤더는 적용할 수 없다.

범위 전송 Range, Content-Range.
전송 도중에 끊긴 경우 클라이언트가 원하는 부분부터 요청해서 받을 수 있다.



 # 일반 정보.

From.
유저 에이전트의 이메일 정보.
일반적으로 잘 사용되지 않음.
검색 엔진 같은 곳에서 주로 사용.
요청에서 사용.

Referer.
이전 웹 페이지 주소.
현재 요청된 페이지의 이전 웹 페이지 주소.
Referer를 사용해서 유입 경로 분석 가능.
요청에서 사용.
	● 참고 : referer는 단어 referrer의 오타.

User-Agent.
클라이언트의 애플리케이션 정보( 웹 브라우저 정보 등 )
통계 정보.
어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능.
요청에서 사용.

Server.
요청을 처리하는 ORIGIN 서버의 소프트웨어 정보.
응답에서 사용.

Date
메시지가 발생한 날짜와 시간.
응답에서 사용.



 # 특별한 정보.

Host.
요청한 호스트 정보( 도메인 )
요청에서 사용. ( 필수 )
하나의 서버가 여러 도메인을 처리해야 할 때.
하나의 IP 주소에 여러 도메인이 적용되어 있을 때.

Location.
페이지 리다이렉션.
웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동. ( 리다이렉션 )
201 ( Created ) : Location 값은 요청에 의해 생성된 리소스 URI.
3xx ( Redirection ) : Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가리킴.

Allow.
허용 가능한 HTTP 메소드.
405( Method Not Allowed )에서 응답에 포함해야함.
많이 사용되진 않는다.
	● 예) Allow : GET, HEAD, PUT.

Retry-After.
유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간.
	● 예1) Retry-After: Fri, 31 Dec 1999 23:59:59 GMT( 날짜 표기 )
	● 예2) Retry-After: 120( 초단위 표기 )



 # 인증.

Authorization.
클라이언트 인증 정보를 서버에 전달.

WWW-Authenticate.
리소스 접근시 필요한 인증 방법 정의.
401 Unauthorized 응답일 때 사용.
	● 예) WWW-Authenticate: Newauth="apps",type=1,title="Login to \"apps\"", Basic realm="simple"



 # 쿠키.

Stateless.
HTTP는 무상태 프로토콜이다.
클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어진다.
클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다.
클라이언트와 서버는 서로 상태를 유지하지 않는다.

쿠키.
서버 사용 예시.
	● setCookie: sessionId=abcd1234; expires=날짜; path=/; domain=도메인이름; Secure;
사용처.
	● 사용자 로그인 세션 관리.
	● 광고 정보 트래킹.
쿠키 정보는 항상 서버에 전송됨.
	● 네트워크 트래픽 추가 유발.
	● 최소한의 정보만 사용( 세션 id, 인증 토큰 )
	● 서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지( localStorage ) 참고.
주의사항.
	● 보안에 민감한 데이터는 저장하면 안됨. ( 주민번호, 신용카드 번호 등등 )

쿠키 - 생명주기.
Set-Cookie: expires=Sat, 26-Dec-2020 12:42:32 GMT ( 시간 )
	● 만료일이 되면 쿠키 삭제.
Set-Cookie: max-age=3600( 초단위 )
	● 0이나 음수를 지정함녀 쿠키 삭제.
세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료시 까지만 유지.
영속 쿠키 : 만료 날짜를 입력하면 해당 날짜가지 유지.

쿠키 - 도메인.
명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함.
	● domain=exampl.org를 지정해서 쿠키 생성.
		○ example.org와 dev.example.org에 쿠키 접근.
생략 : 현재 문서 기준 도메인만 적용.
	● example.org에서 쿠키를 생성하고 domain 지정을 생략.
		○ example.org에서만 쿠키 접근, dev.example.org는 쿠키 미접근.

쿠키 - 경로.
이 경로를 포함한 하위 경로 페이지만 쿠키 접근.
일반적으로 path=/ 루트로 지정.
	● path=/home 지정 -> /home, /home/path 모두 가능.

쿠키 - 보안.
Secure.
	● 쿠키는 http, https를 구분하지 않고 전송.
	● Secure를 적용하면 https인 경우에만 전송.
HttpOnly.
	● XSS 공격 방지.
	● 자바스크립트에서 접근 불가( document.cookie )
	● HTTP 전송에만 사용.
SameSite.
	● XSRF 공격 방지.
	● 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송.




