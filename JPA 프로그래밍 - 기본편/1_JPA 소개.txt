
 JPA 소개.


 
 # 강좌 소개.

JPA 실무에서 어려운 이유!
● 처음 JPA나 스프링 데이터 JPA를 만나면 ?
● SQL 자동화, 수십줄의 코드가 한 두줄로!
● 실무에 바로 도입하면 ?
● 예제들은 보통 테이블이 한 두개로 단순함.
● 실무는 수십 개 이상의 복잡한 객체와 테이블 사용.

객체와 테이블 설계 매핑.
객체와 테이블을 제대로 설계하고 매핑하는 방법.
기본 키와 외래 키 매핑.
1:N, N:1, 1:1, N:M 매핑.
실무 노하우 + 성능까지 고려.
어떠한 복잡한 시스템도 JPA로 설계 가능.

JPA 내부 동작 방식 이해.
JPA의 내부 동작 방식을 이해하지 못하고 사용.
JPA 내부 동작 방식을 그림과 코드로 자세히 설명.
JPA가 어떤 SQL을 만들어 내는지 이해.
JPA가 언제 SQL을 실행하는지 이해.



 # SQL 중심적인 개발의 문제점.

SQL 중심적인 개발의 문제점.
무한 반복, 지루한 코드.
패러다임의 불일치. ( 객체지향와 관계형DB의 차이 )

객체와 관계형 데이터베이스의 차이.
1. 상속. ( DB - Table 슈퍼타입 서브타입 관계 )
2. 연관관계. 
3. 데이터 타입. 
4. 데이터 식별 방법. 

연관관계.
객체는 참조를 사용. ( 한쪽으로만 이동 가능 )
테이블은 외래 키를 사용. ( 양쪽으로 이동 가능 )

레이어드 아키텍처 ( 계층형 아키텍처 )
각 층에서 다른 층의 데이터를 신뢰할 수 있을때 그 데이터를 사용할 수 있다.

결론.
객체답게 모델링 할수록 관계형 DB와 매핑 작업이 늘어난다.
	● 객체를 자바 컬렉션에 저장 하듯이 DB에 저장할 수는 없을까 ?
	● JPA Java Persistence API.



 # JPA 소개.

JPA Java Persistence API.
자바 진형의 ORM 기술 표준.

ORM Object Relational Mapping 객체 관계 매핑.
객체는 객체대로 설계 관계형 데이터베이스는 관계형 데이터베이스대로 설계 ORM 프레임워크가 중간에서 매핑.
대중적인 언어에는 대부분 ORM 기술이 존재.

JPA 실행순서.
저장.
	● DAO를 통해 객체를 보냄.
	● Entity 분석.
	● INSERT SQL 생성.
	● JDBC API 사용.
	● 패더다임 불일치 해결.
조회.
	● DAO를 통해 객체를 보냄.
	● Entity 분석.
	● SELECT SQL 생성.
	● JDBC API 사용.
	● ResultSet 매핑.
	● 패러다임 불일치 해결.

ORM 역사.
EJB 엔티티 빈( 자바 표준 ) -> 하이버네이트( 오픈 소스 ) -> JPA( 자바 표준 )

JPA는 표준 명세.
JPA는 인터페이스의 모음.
JPA 2.1 표준 명세를 구현한 3가지 구현체.
하이버네이트, EclipseLink, DataNucleus. ( 대부분 하이버네이트 )

생산성.
저장 : jpa.persist( member ) ;
조회 : Member member = jpa.find( Member.class, memberId ) ;
수정 : member.setName( "변경할 이름" ) ;
삭제 : jpa.remove( member ) ;

JPA 비교하기.
String memberId = "100" ;
Member member1 = jpa.find( Member.class, memberId ) ;
Member member2 = jpa.find( Member.class, memberId ) ;
member1 == member2 ( true )
	● 같은 트랜잭션에서 조회한 엔티티는 같음을 보장한다.

JPA의 성능 최적화 기능.
1차 캐시와 동일성( identity ) 보장.
트랜잭션을 지원하는 쓰기 지연( transactional write-behind )
지연 로딩( Lazy Loading )

1차 캐시와 동일성 보장.
같은 트랜잭션 안에서는 같은 엔티티를 반환 - 약간의 조회 성능 향상.
DB Isolation Level이 Read Commit이어도 애플리케이션에서 Repeatable Read 보장.

트랜잭션을 지원하는 쓰기 지연 - INSERT.
트랜잭션을 커밋할 때까지 INSERT SQL을 모음.
JDBC BATCH SQL 기능을 사용해서 한번에 SQL 전송.
JPA에서는 옵션 하나만 설정하면 JDBC BATCH 기능을 사용할 수 있다.

지연 로딩과 즉시 로딩.
지연 로딩.
	● 객체가 실제 사용될 때 로딩.
	● 미리 로딩하지 않고 객체가 필요할 때 SQL을 수행 후 로딩한다.
즉시 로딩.
	● JOIN SQL로 한번에 연관된 객체까지 미리 조회.
	● 매번 사용되는 하위 객체는 지연 로딩하지 않고 즉시 로딩하는 것이 효율적이다.
	● JPA 옵션을 통해 즉시 로딩 설정 가능.



