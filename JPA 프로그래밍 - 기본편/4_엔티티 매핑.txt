
 엔티티 매핑.



 # 객체와 테이블 매핑.

엔티티 매핑 소개.
@Entity, @Table : 객체와 테이블 매핑.
@Column : 필드와 컬럼 매핑.
@Id : 기본키 매핑.
@ManyToOne, @JoinColumn : 연관관계 매핑.

@Entity.
@Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수.
주의.
	● 기본 생성자 필수( 파라미터가 없는 public 또는 protected 생성자 )
	● final 클래스,enum, interface, inner 클래스 사용 X.
	● 저장할 필드에 final 사용 X.
name 속성.
	● JPA에서 사용할 엔티티 이름을 지정.
	● 클래스 이름을 기본값으로 사용. 
	● 같은 클래스 이름이 없으면 가급적 기본값을 사용.

@Table.
엔티티와 매핑할 테이블 지정.
@Entity와 같이 사용.
name 속성.
	● 매핑할 테이블 이름을 지정.
	● 기본값은 엔티티 이름을 사용.
	● 뒤에서 더 자세히 배움.
uniqueConstraints 속성.
	● unique 제약조건에 이름까지 설정할 수 있다. ( 컬럼단계에서는 이름 설정 X )



 # 데이터베이스 스키마 자동 생성.

데이터베이스 스키마 자동 생성.
DDL을 애플리케이션 실행 시점에 자동 생성. ( 테이블 중심 -> 객체 중심 )
데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성.
이렇게 생성된 DDL은 개발 장비에서만 사용!! 
생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용.

persistence.xml 추가 코드.
<property name="hibernate.hbm2ddl.auto" value="create" />

hibernate.hmb2ddl.auto 속성.
create : 기존테이블 삭제 후 다시 생성.
create-drop : create와 같으나 애플리케이션 종료시점에 테이블 DROP.
update : 변경분만 반영. ( alter table ... - 운영 DB에는 사용하면 안됨 )
validate : 엔티티와 테이블이 정상 매핑되었는지만 확인.
none : 사용하지 않음.

주의사항.
운영 장비에는 절대 create, create-drop, update 사용하면 안된다.
	● 개발 초기 단계는 create 또는 update.
	● 테스트 서버는 update 또는 validate.
	● 스테이징과 운영 서버는 validate 또는 none.

DDL 생성 기능.
@Column에 unique 속성을 통해 DDL 수행시 제약조건을 생성해 줄 수 있다.



 # 필드와 컬럼 매핑.

컬럼 종류.
@Id : 기본키 매핑.
@Column : 속성 매핑.
@Enumerated( EnumType.STRING ) : enum 타입 매핑.
@Temporal( TemporalType.TIMESTAMP ) : 날짜 타입 매핑.
@Lob : BLOB, CLOB 매핑.
@Transient : 매핑하지 않음.

@Column 속성.
name : 필드와 매핑할 테이블의 컬럼 이름.
insertable, updatable : 등록, 변경 가능 여부. ( 기본값 true )
nullable : null 값의 허용 여부를 설정. ( false == not null )
unique : unique 제약 조건을 생성한다.
columnDefinition : 데이터베이스 컬럼 정보를 직접 줄 수 있다.
length : 문자 길이 제약조건, String 타입에만 사용한다.
precision, scale : 아주 큰 숫자나 소수점 등의 세부사항을 조정할 때 사용.

@Enumerated 속성.
EnumType.ORDINAL : enum 순서를 데이터베이스에 저장. ( 사용하지 말자 )
EummType.STRING : enum 이름을 데이터베이스에 저장.

@Temporal.
이제는 사용하지 않는다. ( 자바 클래스를 통해 제어 가능 )
LocalDate : 년월을 표현하는 날짜 클래스.
LocalDateTime : 년월시간을 표현하는 날짜 클래스.

@Lob.
@Lob에는 지정할 수 있는 속성이 없다.
매핑하는 필드 타입이 문자면 CLOB, 나머지는 BLOB 매핑.

@Transient.
매핑하지 않음.



 # 기본 키 매핑.

기본키 매핑 방법.
@Id : 직접 하당.
@GeneratedValue : 자동 생성.

@GeneratedValue 속성.
strategy 속성.
	● GenerationType.AUTO : 기본값.
	● GenerationType.IDENTITY : auito_increament 역할을 수행한다. ( 타입 상관 없음 )
	● GenerationType.SEQUENCE : SEQUENCE 역할을 수행한다. ( Long 또는 Integer를 사용 )
	● GenerationType.Table : 키 생성 전용 테이블을 하나 만들어서 시퀀스를 흉내내는 전략.

@SequenceGenerator.
GenerationType.SEQUENCE 사용시 시퀀스의 이름 등 세부사항을 설정할 수 있다.
클래스 단계에서 사용한다.
name을 통해 시퀀스를 사용하려는 변수과 매핑한다.

@TableGenerator.
GenerationType.Table 사용시 테이블의 세부사항을 설정할 수 있다.
클래스 단계에서 사용한다.
name을 통해 테이블을 사용하려는 변수과 매핑한다.

권장하는 식별자 전략.
기본 키 제약 조건 : not null, 유일, 변하면 안된다.
	● 미래까지 이 조건을 만족하는 자연키는 찾기 어렵다.
	● 권장 : Long형 + 대체키( 시퀀스, UUID 등 ) + 키 생성전략 사용. ( 시퀀스, AUTO_INCREMENT )

IDENTITY 전략의 특징.
영속성 관리를 위해 persist 호출시 DB에 SQL이 바로 실행된다. ( DB INSERT 전에 Id를 알 수 없기 때문에 )

SEQUENCE 전략의 특징.
영속성 관리를 위해 persist 호출시 DB에서 sequence 값을 가져온다.
가져온 seqeunce 값을 Id 변수에 매핑한다.

SEQUENCE의 성능 최적화.
allocationSize = 50
	● DB에서는 sequence가 호출될 때마다 50씩 증가한다.
	● allocationSize를 설정하면 persist를 호출 시 sequence를 두 번 실행한다.
	● 두 번 실행 후 a ~ b 사이의 값까지 persist 수행 시 메모리에서 ++하면서 Id를 사용한다.



 # 실전 예제1 - 요구사항 분석과 기본 매핑.

스프링 부트 JPA 특징.
java의 카멜 방식과 DB 저장 스네이크 방식을 알아서 바꿔준다. ( Spring boot 메뉴얼 확인해보기 )

데이터 중심 설계의 문제점.
객체 설계를 테이블 설계에 맞춘 방식.
테이블의 외래키를 객체에 그대로 가져옴.
객체 그래프 탐색이 불가능.
참조가 없으므로 UML도 잘못됨.



