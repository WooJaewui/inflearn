
 연관관계 매핑 기초.



 # 단방향 연관관계.

목표.
객체와 테이블 연관관계의 차이를 이해.
객체의 참조와 테이블의 외래 키를 매핑.

용어 이해.
방향 Direction : 단방향, 양방향.
다중성 Multiplicity : 다대일, 일대다, 일대일, 다대다 이해.
연관관계의 주인 Owner : 객체 양방향 연관관계는 관리 주인이 필요.

h2 시퀀스.
Id에 아무 설정하지 않고 persist( ) 하면 hibernate 시퀀스를 생성하고 공동으로 사용한다.

@ManyToOne.
참조된 객체 외래키를 나타내는 속성 또는 1:다에서 1인 객체타입의 변수에 사용한다.

@JoinColumn.
@ManyToOne과 사용한다.
name 속성을 통해 참조된 객체에서 어떤 Column이 외래키인지 알려준다.
	● @Joincolumn( name = "콜럼이름" )



 # 양방향 연관관계와 연관관계의 주인 - 기본.

@OneToMay.
1인 객체에서 private List<클래스> 위에 사용한다.
mappedBy 속성을 사용해서 1:다에서 다인 클래스를 알려줘야 한다.

객체와 테이블이 관계를 맺는 차이.
1. 회원 -> 팀 연관관계 1개 ( 단방향 )
2. 팀 -> 회원 연관관계 1개 ( 양방향 )

객체의 양방향 관계.
객체의 양방향 관계는 양방향 관계가 아니라 서로 다른 단방향 관계 2개다.
객체를 양방향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다.

테이블의 양방향 연관관계.
테이블은 외래키 하나로 두 테이블의 연관관계를 관리.

양방향 매핑 규칙.
● 객체의 두 관계중 하나를 연관관계의 주인으로 지정.
● 연관관계의 주인만이 외래 키를 관리( 등록, 수정 )
● 주인이 아닌쪽은 읽기만 가능.
● 주인은 mappedBy 속성 사용 X.
● 주인이 아니면 amppedBy 속성으로 주인 지정.

누구를 주인으로 ?
외래키가 있는 곳을 주인으로 정해라. ( 여러 가지 장점이 있다 )



 # 양방향 연관과계와 연관관계의 주인 - 주의점.

양방향 매핑시 가장 많이 하는 실수.
주인이 아닌 클래스에서는 읽기만 가능하다. ( DB에 생성/변경/삭제 쿼리를 실행하지 않음 )
하지만, 두 클래스 모두 데이터를 세팅해줘야 한다. - list.add( "값" ); , setter클래스( "값" );

연관관계 편의 메소드.
public void setTeam( Team team ) { 
	this.team = team;
	them.getMembers( ).add(this);
}

주의사항.
양방향 매핑시에 무한 루프를 조심하자.
	● toString( ), lombok, JSON 생성 라이브러리.
		○ lombok에서 toString( ) 사용하지 말 것. ( toString 문제 해결 )
		○ Controller에서 entity를 반환하지 말 것. ( JSON 문제 해결 )

양방향 매핑 정리.
단방향 매핑만으로도 이미 연관관계 매핑은 완료.
양방향 매핑은 반대 방향으로 조회 기능이 추가된 것 뿐.
JPQL에서 역방향으로 탐색할 일이 많음.
단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 됨. ( 테이블에 영향을 주지 않음 )



 # 실전 예제 2 - 연관관계 매핑 시작.

주의사항.
가급적 단방향 매핑이 좋다. ( 필요시에만 양방향으로 넣자 )
단방향 연관관계로도 모든 비즈니스 로직을 수행하는데 문제가 없다. ( 양방향으로 할 경우 편리성을 가질 수 있음 )






