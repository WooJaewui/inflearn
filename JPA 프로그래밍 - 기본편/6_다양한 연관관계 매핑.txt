
 다양한 연관관계 매핑.



 # 다대일 N:1.

연관관계 매핑시 고려사항 3가지.
1. 다중성.
2. 단방향, 양방향.
3. 연관관계의 주인.

다중성.
@ManyToOne : 다대일.
@OneToMany : 일대다.
@OneToOne : 일대일.
@ManyToMany : 다대다.

단방향, 양방향.
테이블.
	● 외래키 하나로 양쪽 조인 가능.
	● 사실 방향이라는 개념이 없음.
객체.
	● 참조용 필드가 있는 쪽으로만 참조 가능.
	● 한쪽만 참조하면 단방향.
	● 양쪽이 서로 참조하면 양방향.

연관관계의 주인.
● 테이블은 외래키 하나로 두 테이블이 연관관계를 맺음.
● 객체 양방향 관계는 A->B , B->A 처럼 참조가 2군데.
● 객체 양방향 관계는 참조가 2군데 있음. 둘 중 테이블의 외래키를 관리할 곳을 지정해야 함.
● 연관관계의 주인은 외래키를 관리하는 참조.
● 주인의 반대편은 외래키에 영향을 주지 않음, 단순 조회만 가능.

다대일 단방향.
● 다 테이블에 외래키가 존재한다.
● 객체에서는 다 객체에서 DB에 외래키 Column과 매핑을 하면 된다. ( @ManyToOne )

다대일 양방향.
● 일 객체에서 다 객체에 외래키 Column과 매핑된 변수와 매핑한다. ( @OneToMany )



 # 일대다 1:N.

일대다 단방향.
● 김영한님은 권장하지 않음. 
● A 테이블과 B 객체의 속성을 매핑해야 된다. ( 테이블이 많아지면 실수할 확률이 높아진다 )
● 쿼리를 좀 더 많이 수행하게 된다. 

일대다 단방향 정리.
● 일대다 단방향은 일이 연관관계의 주인.
● 객체와 테이블의 차이 때문에 반대편 테이블의 외래키를 관리하는 특이한 구조 발생.
● @JoinColumn을 꼭 사용해야 함, 그렇지 않으면 조인 테이블 방식을 사용함. ( 중간에 테이블을 하나 추가함 )

일대다 양방향 예시 코드.
@ManyToOne
@JoinColumn( name = "TEAM_ID" , inserttable = false , updatable = false ) // 읽기 전용으로 만들기.
private Team team;

일대다 양방향 정리.
● 이런 매핑은 공식적으로 존재 X.
● 다대일 양방향을 사용하자.



 # 일대일 1:1.

일대일 관계.
● 일대일 관계는 그 반대도 일대일.
● 주 테이블이나 대상 테이블 중에 외래키 선택 가능.
● 외래키에 데이터베이스 유니크( UNI ) 제약조건 추가.
● @OneToOne , @Column( name= "..." ).
● 테이블과 객체가 서로 반대로 매핑될 수 없다.

일대일 양방향 관계.
● @OneToOne , @Column( name= "..." ) , @OneToOne( mappedBy = "..." ).

일대일 정리.
주 테이블에 외래키.
	● 객체지향 개발자 선호.
	● JPA 매핑 편리.
	● 장점 : 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능.
	● 단점 : 값이 없으면 외래키에 null 허용.
대상 테이블에 왜래키.
	● 대상 테이블에 외래키가 존재.
	● 전통적인 데이터베이스 개발자 선호.
	● 장점 : 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지.
	● 단점 : 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨. ( 양방향일 경우 - 뒤에서 자세히 )



 # 다대다 N:M.

다대다.
● 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음.
● 연결 테이블( 조인 테이블 )을 추가해서 일대다, 다대일 관계로 풀어내야함.
● 객체는 컬렉션을 사용해서 객체 2개로 다대다 관계 가능.
● @ManyToMany , @JoinTable.
● 단방향, 양방향 가능.

다대다 매핑의 한계.
편리해 보이지만 실무에서 사용 X.
연결 테이블이 단순히 연결만 하고 끝나지 않음.
객체와 테이블이 다르기 때문에 예상치 못한 쿼리가 실행될 수 있다.



 # 실전 예제 3 - 다양한 연관관계 매핑.

@JoinColumn.
외래키를 매핑할 때 사용.
	● name : 매핑할 외래키 이름.
	● referencedColumnName : 외래키가 참조하는 대상 테이블의 컬럼명.

@ManyToOne.
다대일 관계 매핑.
	● optional : false로 설정하면 연관된 엔티티가 항상 있어야 한다. ( 기본값 true )
	● mappedBy 속성이 없다.

@OntToMany.
일대다 관계 매핑.
	● mappedBy : 연관관계의 주인 필드를 선택한다.







