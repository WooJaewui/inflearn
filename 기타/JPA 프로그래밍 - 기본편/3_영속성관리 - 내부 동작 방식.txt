
 영속성관리 - 내부 동작 방식.



 # 영속성 컨텍스트 1.

JPA에서 가장 중요한 2가지.
1. 객체와 관계형 데이터베이스 매핑하기 Object Relational Mapping.
2. 영속성 컨텍스트.

영속성 컨텍스트.
JPA를 이해하는데 가장 중요한 용어.
"엔티티를 영구 저장하는 환경" 이라는 뜻.
	● 예) EntityManager.persist( entity ) ;
영속성 컨텍스트는 논리적인 개념. ( 눈에 보이지 않음 )
엔티티 매니저를 통해서 영속성 컨텍스트에 접근.

J2SE 환경.
EntityManager가 하나 생성되면 PersistenceContext가 하나 생성된다. ( 1:1 )

엔티티의 생명주기.
● 비영속 new : 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태.
● 영속 managed : 영속성 컨텍스트에 관리되는 상태.
● 준영속 detached : 영속성 컨텍스트에 저장되었다가 분리된 상태.
● 삭제 removed : DB에서 데이터가 삭제된 상태.

비영속 상태.
Member member = new Member( ) ;
member.setId( "id" );
member.setName( "name" );

영속 상태.
em.persist( member );

준영속 상태.
em.detach( member );

삭제.
em.remove( member ) ;

영속성 컨텍스트의 이점.
● 1차 캐시.
● 동일성 identity 보장.
● 트랜잭션을 지원하는 쓰기 지연 transactional write-behind.
● 변경 감지 Dirty Checking.
● 지연 로딩 Lazy Loading.



 # 영속성 컨텍스트 2.

엔티티 조회, 1차 캐시.
em.find( Member.class, "id" )를 통해 조회. 
	1. 1차 캐시에서 데이터를 확인한다.
	2. 1차에 캐시에 데이터가 있으면 반환한다.
	3. 1차 캐시에 데이터가 없으면 DB에서 조회한다.
	4. DB에 데이터가 있으면 1차 캐시에 저장하고 반환한다.
1차 캐시는 트랜잭션이 종료되면 삭제된다. ( 비즈니스 로직이 복잡할수록 성능에 영향을 줄 수 있다 )
스냅샷이 존재해서 맨 처음 데이터가 들어온 상태를 저장한다.

영속 엔티티의 동일성 보장.
1차 캐시로 반복 가능한 읽기( REPEATABLE READ ) 등급의 트랜잭션 격리 수준을 애플리케이션 차원에서 제공.

트랜잭션을 지원하는 쓰기 지연.
em.persist( member ); 를 하는 순간 DB에 SQL을 보내지 않고, transaction.commit( ); 순간에 SQL을 실행한다.
영속 컨텍스트 내부에 SQL 저장소가 있어서 SQL을 저장해놓는다.
commit 순간에 SQL 저장소에 있는 SQL들을 flush한다.

쓰기 지연을 통한 버퍼 사용하기. ( persistence.xml )
<property name="hibernate.jdbc.batch_size" value="10"/>

변경 감지 Dirty Checking 실행 순서.
1. commit이 일어나면 SQL을 수행한다.
2. 1차 캐시에 스냅샷과 Entity의 값을 비교한다.
3. 비교 후에 다른 값이 존재하면 UPDATE SQL을 생성하여 SQL 저장소에 저장했다가 실행한다.

엔티티 삭제.
em.remove( entity )가 실행되면 SQL 저장소에 저장되고 commit 시점에 DB에서 실행된다.



 # 플러시.

플러시 flush.
영속성 컨텍스트의 변경내용을 데이터베이스에 반영.
플러시는 SQL만 바로 수행하기 만든다. ( 1차 캐시가 삭제되는건 아니다 )

플러시 발생.
변경 감지.
수정된 엔티티 쓰기 지연 SQL 저장소에 등록.
쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송. ( 등록, 수정, 삭제 쿼리 )

영속성 컨텍스트를 플러시하는 방법.
● em.flush( ) : 직접 호출.
● tx.commit( ) : 플러시 자동 호출.
● JPQL 쿼리 실행 : 프러시 자동 호출. ( 뒤에 배움 )

JPQL 쿼리 실행시 플러시가 자동으로 호출되는 이유.
SELECT같은 경우 위에 INSERT SQL가 존재할 경우 DB에서 데이터를 잘 못 읽어올 수 있기 때문에.

플러시 모드 옵션.
em.setFlushMode( FlushModeType.COMMIT )
	● FlushModeType.AUTO : 커밋이나 쿼리를 실행할 때 플러시. ( 기본값 )
	● FlushModeType.COMMIT : 커밋할 때만 플러시.

플러시 특징.
영속성 컨텍스트를 비우지 않음.
영속성 컨텍스트의 변경내용을 데이터베이스에 동기화.
트랜잭션이라는 작업 단위가 중요.
	● 커밋 직전에만 동기화하면 됨.



 # 준영속 상태.

준영속 상태.
영속 상태에서 준영속 상태로 바꿈.
영속 상태의 엔티티가 영속성 컨텍스트에서 분리.
영속성 컨텍스트가 제공하는 기능을 사용 못함.

준영속 상태로 만드는 방법.
● em.detach( entity ) : 특정 엔티티만 준영속 상태로 전환.
● em.clear( ) : 영속성 컨텍스트 초기화. ( 1차 캐시를 지운다 )
● em.close( ) : 영속성 컨텍스트를 종료.



 # 정리.

영속성 컨텍스트.
EntityManager == PersistenceContext ( 1:1 매핑 )
논리적인 개념이다.

용어.
● 비영속 : 영속성 컨텍스트에 저장되지 않은 상태.
● 영속 : 영속성 컨텍스트에 저장된 상태.
● 준영속 : 영속성 컨텍스트에서 삭제.
● 삭제 : DB에서 데이터를 삭제.

영속성 컨텍스트의 이점.
● 1차 캐시.
● 동일성 보장. ( 1차 캐시 )
● 트랜잭션을 지원하는 쓰기 지연 ( SQL 저장소 )
● 변경 감지 ( 1차 캐시 + SQL 저장소 )
● 지연 로딩. ( 뒤에서 설명 )

flush.
커밋이나 쿼리를 수행할 때( 기본값 ) SQL 저장소의 SQL을 DB로 보냄.




