
 고급 매핑.



 # 상속관계 매핑.

상속관계 매핑.
● 관계형 데이터베이스는 상속 관계 X.
● 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사.
● 상속관계 매핑 : 객체의 상속 구조와 DB의 슈퍼타입 서브타입 관계를 매핑.

상속관계 DB 설계.
1. 조인 전략. ( 부모 PK를 자식의 PK 겸 FK로 만든다 )
2. 하나의 테이블로 만듬. 
3. 여러 개의 테이블을 각각 만듬. ( 중복 컬럼 발생 )
	● 어떤 방식으로 구현하든 자바 클래스에서 매핑이 가능하다.

사용 방법.
@Entity
@Inheritance( strategy = InheritanceType.JOINED )
public abstract class Item { 
	
	@Id @GeneratedValue
	private Long id ;
	...
}

@Inheritance.
상속에 관련된 어노테이션이다.
부모 엔티티에 적용한다.
strategy 속성을 통해 어떤 방식으로 DB와 매핑할지 결정할 수 있다.
	● InheritanceType.SINGLE_TABLE : 단일 테이블로 DB가 생성된다. ( 성능이 좋다 )
	● InheritanceType.JOINED : 조인 관계로 테이블이 생성된다.
	● InheritanceType.TABLE_PER_CLASS : 상속이 아닌 테이블만 여러개 생성된다. 

@DiscriminatorColumn.
테이블에 D-Type이라는 속성이 생성되어 어떤 컬럼과 조인이 되었는지 확인할 수 있다.
name 속성을 통해 D-Type이 아닌 다른 속성이름으로 만들 수 있다.

@DiscriminatorValue.
조인된 테이블 이름을 D-Type의 값으로 사용하는데, 값을 변경할 수 있다.

조인 전략.
장점.
	● 테이블 정규화.
	● 외래키 참조 무결성 제약조건 활용가능.
	● 저장공간 효율화.
단점.
	● 조회시 조인을 많이 사용. ( 성능이 저하될 수도 있다 )
	● 조회 쿼리가 복잡함.
	● 데이터 저장시 INSERT SQL 2번 호출.
가장 일반적인 방법이라고 생각하자.

단일 테이블 전략.
장점.
	● 조인이 필요 없으므로 일반적으로 조회 성능이 빠름.
	● 조회 쿼리가 단순함.
단점.
	● 자식 엔티티가 매핑한 컬럼은 모두 null 허용.
	● 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있다. ( 상황에 따라 성능이 나쁠 수 있다 )

구현 클래스마다 테이블 전략.
장점.
	● 서브 타입을 명확하게 구분해서 처리할 때 효과적.
	● not null 제약조건을 사용할 수 있음.
단점.
	● 여러 자식 테이블을 함께 조회할 때 성능이 느림. ( UNION을 통해 모든 테이블 확인 )
	● 자식 테이블을 통합해서 쿼리하기 어려움.
이 전략은 사용하지 말자.



 # Mapped Superclass - 매핑 정보 상속.

@MappedSuperclass.
개념.
	● 공통 매핑 정보가 필요할 때 사용.
	● 여러 클래스에서 공통으로 사용되는 속성( 컬럼 )을 부모 클래스로 만들어서 상속한다.
특징.
	● 상속관계 매핑 X.
	● 엔티티 X, 테이블과 매핑 X.
	● 부모 클래스를 상속 받는 자식 클래스에 매핑 정보만 제공.	
	● 조회, 검색 불가.
	● 직접 생성해서 사용할 일이 없으므로 추상 클래스 권장.
	● 테이블과 관계 없고, 단순히 엔티티가 공통으로 사용하는 매핑 정보를 모으는 역할.
	● @Entity 클래스는 @Entity나 @MappedSuperclass로 지정한 클래스만 상속 가능.

사용 예시.
@MappedSuperclass
public abstract class CommonEntity { 
	private String commonColumn1;
	private String commonColumn2;
	...
}
@Entity
public class Aclass extends CommonEntity { 
	...
}



 # 실전 예제 4 - 상속관계 매핑.

상속 테이블의 설계.
테이블을 상속관계를 통해 여러개로 나누는 것에 대한 고민을 해봐야 한다. ( 단일 테이블이 좋을지 )



