
 스프링 컨테이너와 스프링 빈.



 # 스프링 컨테이너 생성.

스프링 컨테이너.
ApplicationContext는 인터페이스이고, 여러개의 구현 객체가 존재한다.
스프링 컨테이너는 xml기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.
ApplicationContext 상위에 BeanFactory가 존재한다.

스프링 컨테이너 실행 순서.
1. @Configuration과 AnnotationApplicationContext를 통해 스프링 컨테이너 설정을 읽어온다.
2. @Bean을 확인하고 Bean을 생성한다.
3. 스프링 빈 설정 정보를 참고해서 의존관계를 주입한다.

빈 생성 주의사항.
빈 이름은 항상 다른 이름을 부여.



 # 컨테이너에 등록된 모든 빈 조회.

getBeanDefinitionNames( ) ;
ApplicationContext에서 bean들의 이름을 얻는다.

beanDefinition.getRole( ) ;
ROLE_APPLICATION : 일반적으로 사용자가 정의한 빈.
ROLE_INFRASTRUCTURE : 스프링이 내부에서 사용하는 빈.

단축키.
ctrl + d : 내가 선택한 부분 복사 붙여넣기.



 # 스프링 빈 조회 - 기본.

기본형식.
getBean( "빈이름" , 타입 ) ;
getBean( 타입 ) ;

예외 발생 test 작성.
Assertions.assertThrows( 예외.class , ( ) -> 실행할 함수( ) ) ;



 # 스프링 빈 조회 - 동일한 타입이 둘 이상.

테스트에서 Configuration 만들기.
static class 클래스이름 { 
	@Bean
	...
}

getBeansOfType( 타입 ) ;
타입으로 등록된 모든 bean을 Map<String , 타입> 값으로 리턴해준다.



 # 스프링 빈 조회 - 상속 관계.

상속관계 조회.
부모 타입으로 조회하면, 자식 타입도 함께 조회된다.
Object 타입을 조회하면, 모든 스프링 빈을 조회한다.

리턴 타입을 부모 타입으로 하는 이유.
다른 사람이 보기에 가독성이 높아진다.

빈 조회.
실제 개발할때는 거의 사용하지 않으나, 원리를 이해할 수 있다.



 # BeanFactory와 ApplicationContext.

BeanFactory.
스프링 컨테이너의 최상위 인터페이스다.
스프링 빈을 관리하고 조회하는 역할을 담당한다.
getBean( )을 제공한다.
직접 사용할 일이 거의 없다. ( ApplicationContext를 사용한다 )

ApplicationContext.
BeanFactory 기능을 모두 상속받아서 제공한다.
빈을 관리하고 조회하는 기능 외에 부가기능을 사용할 수 있다.
MessageSource, EnvironmentCapable, ApplicationEventPublisher, ResouceLoader, ... 등을 상속.

MessageSource.
메시지소스를 활용한 국제화 기능.
한국에서 들어오면 한국어로, 영어권에서 들어오면 영어로 출력하는 기능을 가진다.

EnvironmentCapable.
로컬, 개발, 운영 등을 구분해서 처리.

ApplicationEventPublisher.
이벤트를 발행하고 구독하는 모델을 편리하게 지원.

ResouceLoader.
파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회.



 # 다양한 설정 형식 지원 - 자바 코드 , XML.

스프링 설정.
스프링 컨테이너는 다양한 형식의 설정 정보를 받아드릴 수 있게 유연하게 설계되어 있다.
자바코드 , XML , Groovy 등.
AnnocationConfigApplicationContext, GenericXmlApplicationContext, XxxApplicationContext 등.

xml 설정 조회.
new GenericXmlApplicationContext( "파일이름.xml" ) ;



 # 스프링 빈 설정 메타 정보 - BeanDefinition.

BeanDefinition.
스프링 컨테이너가 설정 파일을 읽어오면 BeanDefinition을 만든다.
BeanDefinition은 빈 설정 메타정보이다.

AnnotationConfigApplicationContext 실행 순서.
AnnotatedBeanDefinitionReader을 통해 @Bean을 읽어서 BeanDefinition을 만든다.

GenericXmlApplicationContext.
XmlBeanDefinitionReader를 통해 <bean>을 읽어서 BeanDefinition을 만든다.

BeanDefinition 정보.
BeanClassName : 생성할 빈의 클래스 명.
factoryBeanName : 팩토리 역할의 빈을 사용할 경우 이름.
factoryMethodName : 빈을 새성할 팩토리 메소드 지정.
Scope : 싱글톤( 기본값 ) 
lazyInit : 실제 빈을 사용할 때까지 최대한 생성을 지연처리 하는지 여부.
InitMethodName : 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메소드 명.
DestroyMethodName : 빈의 생성주기가 끝나서 제거하기 직전에 호출되는 메소드 명.
Constructor arguments, Properties : 의존관계 주입에서 사용한다.

정리.
스프링이 다양한 형태의 설정 정보를 BeanDefinition으로 추상화해서 사용한다.






