
 싱글톤 컨테이너.



 # 웹 애플리케이션과 싱글톤.

웹 애플리케이션과 싱글톤.
스프링은 태생이 기업용 온라인 서비스 기술을 지원하기 위해 탄생했다.
대부분의 스프링 애플리케이션은 웹 애플리케이션이다. ( 웹이 아니여도 개발 가능 )
웹 애플리케이션은 보통 여러 고객이 동시에 요청을 한다.



 # 싱글톤 패턴.

싱글톤 패턴.
클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.
private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.
private static final 자기자신타입 으로 인스턴스를 하나 생성한다.
싱글톤을 구현하는 방법은 다양하다.

assertThat( ).
isSameAs( ) : ==와 같은 역할을 한다.
isEqualsTo( ) : equals( )를 실행한다.

싱글톤 패턴 문제점.
싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
의존관계상 클라이언트가 구체 클래스에 의존한다.
테스트하기 어렵다.
내부 속성을 변경하거나 초기화 하기 어렵다.
private 생성자로 자식 클래스를 만들기 어렵다.
결론적으로 유연성이 떨어진다.
안티패턴으로 불리기도 한다.



 # 싱글톤 컨테이너.

싱글톤 컨테이너.
스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라한다.
스프링 컨테이너의 기능 덕분에 싱글턴 패턴의 모든 단점을 해결할 수 있다.

참고사항.
스프링은 싱글톤 방식만 지원하는 것은 아니다. 설정을 통해 다른 방식을 사용할 수 있다.



 # 싱글톤 방식의 주의점.

싱글톤 방식의 주의점.
무상태 stateless로 설계해야 한다.

무상태 stateless 설계.
특정 클라이언트에 의존적인 필드가 있으면 안된다.
특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
가급적 읽기만 가능해야 한다.
필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.

단축키.
ctrl + shift + t : 테스트 코드를 만들 수 있다.

무상태로 설계 예시.
로직을 수행하고 결과값까지 리턴하는 방식으로 만들자.



 # @Configuration과 바이트코드 조작의 마법.

@Configuration 클래스.
패키지이름.클래스xxxxCGLIB : 내가 만든 클래스가 아니라 스프링이 CGLIB라는 바이트코드 조작 라이브러리를
			사용해서 클래스를 상속받은 임의의 다른 클래스를 만들고 빈으로 등록한 것이다.


xxxCGLIB 클래스 예상 코드.
@Bean 메소드 실행시 컨테이너에 빈이 등록되어 있으면 그 빈을 반환해주고, 없으면 빈을 생성해준다.

주의사항.
@Configuration을 빼고 @Bean만 만들면 CGLIB가 안 만들어져서 @Bean의 싱글톤이 보장되지 않는다.





