
 회원관리예제 - 백엔드 개발.



 # 비즈니스 요구사항 정리.

비즈니스 요구사항 정리.
데이터 : 회원ID, 이름.
기능 : 회원 등록, 조회.
아직 데이터 저장소가 선정되지 않음( 가상의 시나리오 )

일반적인 웹 애플리케이션 계층 구조.
컨트롤러 : 웹 MVC의 컨트롤러 역할.
서비스 : 핵심 비즈니스 로직 구현.
리포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리.
도메인 : 비즈니스 도메인 객체. ( 예 - 회원, 주문, 쿠폰 등 주로 데이터베이스에 저장하고 관리됨 )
DB : 데이터베이스.

클래스 의존관계.
MemberService -> MemberRepository( interface ) -> MomoryMemberRepository
아직 데이터 저장소가 선정되지 않아서, 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계.
데이터 저장소는 RDB, NoSQL 등 다양한 저장소를 고민중인 상황으로 가정.
개발을 진행하기 위해서는 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소 사용.



 # 회원 도메인과 리포지토리 만들기.

단축키.
alt + insert : getter, setter, constructor 생성.
alt + enter : 인터페이스 구현 메소드 자동 생성.

domain 생성.
domain 패키지 생성 -> Member 클래스 생성 -> id, name 변수 생성 -> getter, setter 메소드 생성.

repository 생성.
repository 패키지 생성 -> MemberRepository 인터페이스 생성 -> Member, Optional, List 추상 메소드 생성.
-> MemoryMemberRepository 클래스 생성 -> MemberRepository 상속 후 추상 메소드 구현.



 # 회원 리포지토리 테스트 케이스 작성.

테스트 케이스 작성.
main메소드나, contoller에 실행에 의한 기능 테스트는 시간이 오래 걸리고, 반복 실행하기 어렵고,
여러 테스트를 한번에 실행하기 어렵다는 단점이 있다.
자바는 JUnit이라는 프레임워크로 테스트를 실행해서 이러한 문제를 해결한다.

테스트 패키지.
기존 java에서 만들었던 패키지와 똑같은 이름으로 작성한다.

@Test
org.junit.jupiter.api.Test.

테스트 코드 만들기.
@Test
public void save( ) { 
	Member member = new Member( ) ;
	member.setName( "spring" ) ;

	repository.save( member ) ;
	
	member result = repository.findById( member.getId( ) ).get( ) ;
	Assertions.assertEquals( member, result ) ;
}

Assertions.assertEquals( 1, 2 ) ;
org.junit.jupiter.api.Assertions 클래스.
1번 자리에는 기대하는 데이터( Expected )를 넣고, 2번자리에 실제 데이터( Actual )를 넣는다.
1번과 2번이 같으면 정상 실행, 다르면 run 했을 때 오류가 발생한다.

Assertions.assertThat( 2 ).isEqualsTo( 1 ) ;
org.assertj.core.api.Assertions 클래스.
1번 자리에는 기대하는 데이터( Expected )를 넣고, 2번자리에 실제 데이터( Actual )를 넣는다.
1번과 2번이 같으면 정상 실행, 다르면 run 했을 때 오류가 발생한다.

jUnit Test 장점.
클래스 단위에서 run을 실행하면 클래스 내부에 작성한 모든 test의 결과를 확인할 수 있다.

jUnit 실행순서 주의점.
Test의 순서는 보장되지 않는다 매번 다르게 실행될 수 있다.

@AfterEach
테스트가 끝날때마다 실행하는 메소드를 만들 때 사용하는 어노테이션.
Test의 순서를 보장하지 않기 때문에 Test실행 후 데이터를 지워줘야된다. ( repository.clear( ) )



 # 회원 서비스 개발.

서비스 이름.
비즈니스에 가까운 용어를 많이 사용해야 이해하기 쉽다.




 # 회원 서비스 테스트.

단축키
ctrl + shift + T : 테스트를 쉽게 생성하는 방법.
stift + F10 : 이전에 run한 것을 다시 run.

테스트 메소드 이름.
한글로 사용해도 된다 ( 빌드될 때 실제 코드에 포함되지 않는다 )

테스트 코드 작성방법.
given : 어떤 데이터를 넣었을 때
when : 어떤 상황에서
then : 어떤 값이 나온다.

@BeforeEach
테스트 코드 이전에 실행할 코드 설정.





