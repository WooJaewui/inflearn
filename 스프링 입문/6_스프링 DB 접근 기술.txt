
 스프링 DB 접근 기술.
 20 ~ 25강



 # H2 데이터베이스 설치.

H2 다운로드.
https://www.h2database.com/html/main.html -> Download -> Archive Downloads -> 1.4.200 다운.

H2 실행하기.
H2 폴더 -> bin -> 윈도우 : h2.bat , 리눅스 : h2.sh 실행 

JDBC URL 설정.
jdbc:h2:tcp://localhost/~/test

테이블 생성 예시.
create table member
(
	id bigint generated by default as identity,
	name varchar(255),
	primary key(id)
);

insert 예시.
insert into 테이블이름( column ) values( value )

SQL 관리.
프로젝트 하위 디렉토리로 SQL을 만들고 파일이름.sql을 만들어서 주요 SQL을 저장해서 관리.

주의사항.
cmd에서 H2를 실행해야되고, 도중에 종료하면 DB에 접근할 수 없다.



 # 순수 JDBC

h2 설정하기 - build.gradle.
dependencies { 
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'
}
설정 후 코끼리 버튼 누르기.

h2 설정하기 - application.properties.
spring.datasource.url = h2url주소
spring.datasource.driver-class-name = org.h2.Driver ( build.gradle dependency 완료 후 가능 )
spring.datasource.username=sa

단축키
alt + enter : 인터페이스 상속 메소드 구현.

dataSource.
DataSourceUtils를 통해서 Connection을 해야 새로운 Connection이 아닌 하나의 Connection으로 사용.
springConfig에 DataSource를 변수로 설정하고 생성자에서 사용한다.

어셈블리.
어떠한 component를 조립하는 것을 의미한다.

개방-폐쇄 원칙 OCP Oepn-Closed Principle.
확장에는 열려있고, 수정, 변경에는 닫혀있다.
스프링의 DI을 사용하면 기존 코드를 전혀 손대지 않고, 설정만으로 구현 클래스를 변경할 수 있다.



 # 스프링 통합 테스트.

테스트 원칙.
테스트는 반복할 수 있어야한다.

@SpringBootTest
스프링 부트 기반으로 테스트를 할 때 적어줘야된다.

@Transactional
테스트를 시작할 때 Transction처리해서 테스트가 끝나면 테스트에서 실행한 데이터를 rollback해준다.
테스트 하나하나마다 트랜잭션 처리해준다.

@Autowired.
테스트코드에서는 생성자를 통한 주입이 아닌 변수에 주입을 해서 편하게 사용한다.

테스트 용어.
단위테스트 : 적은 양의 단위로 쪼개서 테스트를 실행하는 것.
통합테스트 : spring-container와 db까지 연결해서 통합적으로 실행하는 테스트.

테스트 설계.
통합테스트보다 단위테스트를 잘 짜는것이 더 설계를 잘하는 것이다. ( 항상 그런것은 아님 )



  # 스프링 JdbcTemplate.

JdbcTemplate.
순수 Jdbc와 동일한 환경설정을 하면 된다.
JDBC API에서 본 반복 코드를 대부분 제거해준다. ( SQL은 제거되지 않음 )

생성자 Autowired.
생성자가 1개일 때 Autowired를 생략할 수 있다.

JdbcTemplate 생성예시.
private final JdbcTemplate jdbcTemplate ;
public JdbcTemplateMemberRepository( DataSource dataSource ) { 
	jdbcTemplate = new JdbcTemplate( dataSource ) ;
} 

JdbcTemplate 사용예시.
jdbcTemplate.query( "select * from member where name = ? " , memberRowMapper( ), name ) ;
private RowMapper<Member> memberRowMapper( ) { 
	return ( rs, rowNum ) -> { 
		Member member = new Member( ) ;
		member.setId( rs.getLong( "id" ) ) ;
		member.setName( rs.getString( "name" ) ) ;
		return member ;
	} ;
} 



 # JPA.

JPA Java Persistance API.
기존의 반복 코드를 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환 할 수 있다.
개발 생산성을 크게 높일 수 있다.

JPA 설정 - build.gradle
implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

JPA 설정 - application.properties.
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none

JPA 설정 확인.
External Libraries에서 hibernate 라이브러리가 추가되어야한다.

JPA 설명.
자바에 표준인터페이스고, hibernate라는 구현체를 사용하는 것이다.

JPA 사용 - VO.
@Entity : VO객체라는 것을 알려준다. ( 클래스에 설정 )
@Id, @GeneratedValue( strategy = GenerationType.IDENTITY ) : primarykey 변수에 적용.
@Column( name = "DB column 이름" ) 
private 타입 변수이름 ;

JPA 사용 - Repository.
private final EntityManager em : JPA를 사용하기 위한 클래스.



 # 스프링 데이터 JPA.

스프링 데이터 JPA.
반복 개발해온 기본 CRUD 기능을 스플이 데이터 JPA가 모두 제공한다.
실무에서 관계형 데이터베이스를 사용한다면 스프링 데이터 JPA는 이제 선택이 아니라 필수.

주의사항.
스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이다.
JPA를 먼저 깊게 파악한 후에 스프링 데이터 JPA를 공부하는 것이 좋다.
인터페이스가 인터페이스를 상속받을 때는 extends라고 한다.

JpaRepository.
findAll( ), save, delete, getOne( id ) 등 기본적인 CRUD를 제공해준다.
페이징 기능 자동 제공.
id가 아닌 다른 column을 조건으로 find하는 것은 제공하지 않는다. ( Entity마다 다르기 때문 )
findByColumn( type column ) 으로 find를 할 수 있다. ( 자동으로 SQL이 실행됨 )

Querydsl 라이브러리.
복잡한 동적 쿼리를 처리해준다. ( 따로 공부해야 될 내용 )





