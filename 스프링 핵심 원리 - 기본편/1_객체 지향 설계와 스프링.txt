
 객체 지향 설계와 스프링.



 # 자바 진영의 추운 겨울과 스프링의 탄생.

스프링의 역사.
2002년 로드 존슨 책 출간.
EJB의 문제점 지적.
지금의 스프링 핵심 개념과 기반 코드가 들어 있다.



 # 스프링이란 ?

스프링에서 사용하는 기술.
필수 : 스프링 프레임워크 , 스프링 부트 
선택 : 스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드 등.

스프링 프레임워크.
핵심 기술 : 스프링 DI 컨테이너, AOP, 이벤트, 기타.
웹 기술 : 스프링 MVC, 스프링 WebFlux.
데이터 접근 기술 : 트랜잭션, JDBC, ORM 지원, XML 지원.
기술 통합 : 캐시, 이메일, 원격접근, 스케줄링.
테스트 : 스프링 기반 테스트 지원.
언어 : 코틀린, 그루비.

스프링 부트.
스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용.
단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성.
Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨.
손쉬운 빌드 구성을 위한 starter 종속성 제공.
스프링과 3rd parth( 외부 ) 라이브러리 자동 구성.
메트릭, 상태 확인, 외부 구성같은 프로덕션 준비 기능 제공. ( 모니터 )
관례에 의한 간결한 설정.

스프링 단어 ?
스프링이라는 단어는 문맥에 따라 다르게 사용된다.
스프링 DI 컨테이너 기술.
스프링 프레임워크.
스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계.

스프링의 핵심 방향성.
스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크.



 # 좋은 객체 지향 프로그래밍이란 ?

객체 지향 프로그래밍.
객체는 메시지를 주고받고, 데이터를 처리할 수 있다. ( 협력 )
프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.

유연하고, 변경이 용이하다. ( 다형성 polymorphism )
컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법.

역할과 구현을 분리.
클라이언트는 대상의 인터페이스만 알면 된다.
클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
클라리언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
객체를 설계할 때 인터페이스를 먼저 생성하고, 그 역할을 수행하는 구현 객체 만들기.

다형성의 본질.
다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야함.
클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

역할과 구현을 분리 한계점.
인터페이스가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다.
인터페이스를 안정적으로 잘 설계하는 것이 중요.

스프링과 객체 지향.
스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.



 # 좋은 객체 지향 설계의 5가지 원칙 SOLID.

SOLID.
클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리.

SRP Single Responsibility Principle 단일 책임 원칙.
한 클래스는 하나의 책임만 가져야 한다. ( 하나의 책임이라는 것은 모호하다 )
변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것.

OCP Open/Closed Principle 개발-폐쇄 원칙.
소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
구현 객체를 통한 확장에 열려 있어야 한다.
기존 코드를 변경하지 않고 기능 확장이 가능해야 한다.

OCP 문제점.
객체를 생성하고, 연관관계를 맺어주는 별도의 조립/설정자가 필요하다. ( 스프링 컨테이너 )

LSP Liskov Substitution Principle 리스코프 치환 원칙.
구현 클래스는 인터페이스 규약을 다 지켜야 한다는 것.

ISP Interface Segregation Principle 인터페이스 분리 원칙.
특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
인터페이스가 명확해지고, 대체 가능성이 높아진다.

DIP Dependency Inversion Principle 의존관계 역전 원칙.
구체화에 의존하지 않고 추상화에 의존해야 된다.
클라이언트가 구현클래스에 의존되지 않고 인터페이스만 의존해야 된다.

정리.
객체 지향의 핵심은 다형성.
다형성만으로는 OCP , DIP를 지킬 수 없다.
뭔가 더 필요하다.



 # 객체 지향 설계와 스프링.

최종 정리.
모든 설계에 역할( 인터페이스 )과 구현( 구현 객체 )을 분리하자.
역할에 대한 구현을 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계다.

실무 고민.
기능을 확장할 가능성이 없다면 구체 클래스를 직접 사용하고 향후에 인터페이스를 도입하는 것도 방법이다.





