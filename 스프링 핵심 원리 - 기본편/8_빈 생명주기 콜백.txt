
 빈 생명주기 콜백.



 # 빈 생명주기 콜백 시작.

스프링 라이프사이클.
객체 생성 -> 의존관계 주입.
  - 스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 데이터를 사용할 준비가 완료된다.
  - 초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야 한다.
  - 스프링은 의존관계 주입이 완료되면 빈에게 콜백 메소드를 통해 초기화 시점을 알려주는 기능을 제공한다.
  - 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다.

스프링 빈의 이벤트 라이프사이클.
스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료.

콜백.
초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출.
소멸전 콜백 : 빈이 소멸되기 직전에 호출.

객체의 생성과 초기화를 분리하자.
생성자는 필수 정보를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다.
초기화는 생성된 값들을 활용해서 외부 커넥션을 연결하는 등 무거운 동작을 수행한다.
  - 따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 
    생성하는 부분과 초기화 하는 부분을 명확하게 나누는 것이 유지보수 관점에서 좋다.
  - 초기화 작업이 내부 값들만 약간 변경하는 정도로 단순한 경우에는 생성자에서 처리하는게 나을 수 있다.

스프링의 콜백 지원 3가지 방법.
1. 인터페이스 InitializingBean, DisposableBean.
2. 설정 정보에 초기화 메소드, 종료 메소드 지정.
3. @PostConstruct, @PreDestory 애노테이션 지원.



 # 인터페이스 InitializingBean, DisposableBean.

인터페이스 사용 코드 예시.
public class 클래스이름 implements InitializingBean, DisposableBean { 

	@Override
	public void afterPropertiesSet( ) throws Exception { 
		빈이 생성되고, 의존관계 주입이 완료된 후 실행될 코드 ;
	}

	@Override
	public void destroy( ) throws Exception { 
		빈이 소멸되기 직전에 호출될 코드 ;
	}
}

인터페이스 단점.
스프링 전용 인터페이스이기 때문에 코드가 스프링 인터페이스에 의존한다.
초기화, 소멸 메소드의 이름을 변경할 수 없다.
내가 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 없다.
  - 최근에는 더 좋은 기능들이 많아서 거의 사용하지 않는다.



 # 빈 등록 초기화, 소멸 메소드.

빈 등록 예시 코드.
@Configuration
static class 클래스이름 { 
	@Bean( initMethod = "init메소드이름" , destroyMethod ="destory메소드이름" )
	public 타입 빈이름( ) { 
		실행할 코드 ;
	}

}

설정 정보 사용 특징.
메소드 이름을 자유롭게 줄 수 잇다.
스프링 빈이 스프링 코드에 의존하지 않는다.
코드가 아니라 설정 정보를 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 적용할 수 있다.

종료 메소드 추론.
destroyMethod 속성에는 아주 특별한 기능이 있다.
라이브러리 대부분 close, shutdown 이라는 이름의 종료 메소드를 사용한다.
@Bean의 destroyMethod는 기본값이 ( inferred )으로 등록되어 있다.
추론 기능은 close , shutdown 이라는 메소드를 자동으로 호출해준다.
추론 기능을 사용하기 싫으면 destoryMethod="" 라고 설정하면 된다.



 # 애노테이션 @PostConstruct, @PreDestory.

javax 패키지.
자바에서 공식으로 지원하는 기능.

@PostConstruct, @PreDestroy .
최신 스프링에서 가장 권장하는 방법이다.
애노테이션 하나만 붙이면 되므로 매우 편리하다.
스프링에 종속적인 기술이 아니라 JSR-250라는 자바 표준이다. ( 스프링이 아닌 다른 컨테이너에도 동작 )
컴포넌트 스캔과 잘 어울린다.
유일한 단점은 외부 라이브러리에는 적용하지 못한다는 점이다. ( 외부 라이브러리는 @Bean의 기능 사용 )

정리.
@PostConstruct, @PresDestroy 애노테이션을 사용하자.
외부 라이브러리를 초기화, 종료해야 하면 @Bean( initMethod = ... , destroyMethod = ... ) 를 사용하자.






