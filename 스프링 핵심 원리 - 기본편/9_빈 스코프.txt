
 빈 스코프.



 # 빈 스코프란 ?

빈 스코프.
스프링 빈은 스프링 컨테이너의 시작과 함께 생성되어 스프링 컨테이너가 종료될 때까지 유지된다.
스코프는 빈이 존재할 수 있는 범위를 의미한다.

스프링에서 지원하는 스코프.
  - 싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프.
  - 프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여한다.

웹 관련 스코프.
request : 웹 요청이 들어오고 나갈 때까지 유지되는 스코프.
session : 웹 세션이 생성되고 종료될 때까지 유지되는 스코프.
application : 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.

컴포넌트 스캔 자동 등록.
@Scope( "prototype" )
@Component
public class 빈이름 { 
	...
}

수동 등록
@Scope( "prototype" )
@Bean
PrototypeBean 메소드이름( ) { 
	...
}



 # 프로토타입 스코프.

프로토타입 스코프.
프로토타입 스코프를 스프링 컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.

프로토타입 빈 요청 순서.
1. 프로토타입 스코프의 빈을 스프링 컨테이너에 요청한다.
2. 스프링 컨테이너는 이 시점에 프로토타입 빈을 생성하고, 필욯나 의존관계를 주입한다.
3. 스프링 컨테이너는 생성한 프로토타입 빈을 클라이언트에 반환한다.
4. 이후에 스프링 컨테이너에 같은 요청이 오면 항상 새로운 프로토타입 빈을 생성해서 반환한다.

프로토타입 특징.
프로토타입 스코프의 빈은 스프링 컨테이너에서 빈을 조회할 때 생성되고, 초기화 메소드도 실행된다.
프로토타입 빈을 2번 조회했으므로 완전히 다른 스프링 빈이 생성되고, 초기화도 2번 실행된 것을 확인할 수 있다.
프로토타입 빈은 스프링 컨테이너가 초기화까지만 관여하기 때문에 @PreDestroy 같은 종료 메소드를 실행하지 않는다.

프로토타입 빈의 특징 정리.
스플이 컨테이너에 요청할 때 마다 새로 생성된다.
스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입 그리고 초기화까지만 관여한다.
종료 메소드가 호출되지 않는다.
프로토타입 빈은 프로토타입 빈을 조회한 클라이언트가 관리해야 한다.



 # 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점.

싱글톤 빈에서 프로토타입 빈 사용.
clientBean : 싱글톤 , PrototypeBean : 프로토 타입.
  1. clientBean은 의존관계 자동 주입을 사용한다. 주입 시점에 스프링 컨테이너에 프로토타입 빈을 요청한다.
  2. 스프링 컨테이너는 프로토타입 빈을 생성해서 clientBean에 반환한다. 프로토타입 빈의 count 필드 값은 0이다.
  3. 클라이언트 A는 clientBean.logic( )을 호출한다.
  4. clientBean은 prototypeBean의 addCount( )를 호출해서 프로토타입 빈의 count를 증가시킨다. ( 0 -> 1 )
  5. 클라이언트 B는 clientBean.logic( )을 호출한다.
  6. clientBean은 prototypeBean의 addCount( )를 호출해서 count가 1 -> 2가 된다.

문제점.
프로토타입이지만, 싱글톤 빈에서 DI되기 때문에 싱글톤처럼 하나만 생성되어 사용된다.



 # 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결.

문제 해결 방안.
싱글톤 빈과 프로토타입 빈을 함께 사용할 때, 어떻게 사용할 때 마다 새로운 프로토타입 빈을 생성할까 ?

의존관계 조회 / 탐색 DL Dependency Lookup.
의존관계를 외부에서 주입( DI ) 받는게 아니라 직접 필요한 의존관계를 찾는 것을 의미한다.

ObjectFactory<타입> , ObjectProvider<타입>.
스프링 컨테이너를 통해 해당 빈을 찾아서 반환해준다. ( DL 기능을 제공 )
단위테스트를 만들거나 mock 코드를 만들기 훨씬 쉬워진다.
ObjectFactory는 getObject( ) 메소드만 제공하고, ObjectProvider는 추가적인 메소드를 제공한다.

JSR-330 Provider.
javax.inject.Provider 라는 JSR-330 자바 표준을 사용하는 방법이다.
javax.inject:javax.inject:1 라이브러리를 gradle에 추가해야 한다.
get( )을 통해서 항상 새로운 프로토타입 빈이 생성된다.
자바 표준이고, 기능이 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.
별도의 라이브러리가 필요하지만, 자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.

정리.
매번 사용할 때 마다 의존관계 주입이 완료된 새로운 객체가 필요할때 사용하면 된다.
그러나 실무에서 싱글톤 빈으로 대부분의 문제를 해결할 수 있기 때문에 프로토타입 사용은 매우 드물다.
ObjectProvider를 대부분 사용하고, 스프링이 아닌 컨테이너를 사용해야 되는 경우 JSR-330 Provider를 사용한다.

자바표준과 스프링.
자바 표준과 스프링이 제공하는 기능이 겹칠때가 많다.
두 가지 기능을 확인해보고 좀 더 편리한 기능을 사용하면 된다. ( 대부분 스프링이 편리하다 )



 # 웹 스코프.

웹 스코프의 특징.
웹 스코프는 웹 환경에서만 동작한다.
웹 스코프는 프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관리한다.

웹 스코프의 종류.
request : HTTP 요청 하나가 들어오고 나갈 때까지 유지되는 스코프. HTTP마다 인스턴스가 생성되고 관리된다.
session : HTTP session과 동일한 생성주기를 가지는 스코프.
application : 서블릿 컨텍스트와 동일한 생명주기를 가지는 스코프.
websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프.



 # request 스코프 예제 만들기.

웹 환경 추가.
웹 스코프는 웹 환경에서만 동작하므로 web 환경이 동작하도록 라이브러리를 추가하자.
implementation 'org.springframework.boot:spring-boot-starter-web'

참고사항.
스프링 부트는 웹 라이브러리가 없으면 AnnotationConfigApplicationContext을 기반으로 구동된다.
웹 라이브러리가 추가되면 AnnotationConfigServletWebServerApplicationContext를 기반으로 구동된다.

포트 변경하기.
main/resources/application.properties -> server.port=포트번호 ;

@Scope( value = "request" )
컴포넌트의 생성주기를 request 스코프로 지정한다.
request 스코프 빈은 웹 브라우저 요청이 있어야 생성된다.

MVC 작성 팁.
requestURL 같은 웹과 관련된 정보는 서비스 계층까지 넘어가지 않게 작성하는 것이 좋다.



 # 스코프와 Provider.

request 스코프 빈에 Provider 적용하기.
private final ObjectProvider<빈이름> 변수이름 ;

@RequestMapping( "url" )
@ResponseBody
public String 메소드이름( HttpServlerRequest request ) { 
	빈이름 변수 = 변수이름.getObject( ) ;
	request 스코프 빈으로 실행할 코드 ;
}

Provider의 역할.
컨테이너에게 요청하는 request 스코프 빈의 생성 시점을 지연시킬 수 있다.



 # 스코프와 프록시.

@Scope( proxyMode = ... )
적용 대상이 클래스면 ScopedProxyMode.TARGET_CLASS.
적용 대상이 인터페이스면 ScopedProxyMode.INTERFACES.

프록시의 역할.
CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
getBean( )으로 조회해도 프록시 객체가 조회되는 것을 확인할 수 있다.
그래서 의존관계 주입도 이 가짜 프록시 객체가 주입된다.
가짜 프록시 객체는 요청이 오면 그때 내부에서 진짜 빈을 요청하는 위임 로직이 들어있다.
가짜 프록시 객체는 내부에 진짜 객체를 찾는 방법을 알고 있다.
가짜 프록시는 객체를 사용하는 클라이언트 입장에서는 원본인지 아닌지 모르게 사용할 수 있다. ( 다형성 )
가짜 프록시 객체는 실제 request scope와 관련가 없다. 싱글톤처럼 동작하고 위임 로직만 존재한다.

정리.
Provider를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 필요한 시점까지 지연처리 한다는 것이다.
꼭 웹 스코프가 아니어도 프록시는 사용할 수 있다.

주의사항.
싱글톤처럼 사용하는 것 같지만 다르게 동작하기 때문에 결국 주의해서 사용해야 한다.
특별한 scope는 꼭 필요한 곳에만 최소화해서 사용하자. 무분별하게 사용하면 유지보수하기 어려워진다.





